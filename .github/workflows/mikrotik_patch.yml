name: Patch Mikrotik RouterOS
on:
  # push:
  #   branches: [ "main" ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'RouterOS version, e.g.: 7.15.1, blank for latest'
        type: string
        default: ''
permissions:
  contents: write

jobs:
  Create_SquashFS:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Shanghai'
    steps:
      - name: Create squashfs for option npk        
        run: |
          cd $GITHUB_WORKSPACE
          sudo wget -O bash -nv https://busybox.net/downloads/binaries/1.31.0-i686-uclibc/busybox_ASH
          sudo wget -O busybox -nv https://busybox.net/downloads/binaries/1.31.0-i686-uclibc/busybox
          sudo chmod +x busybox
          sudo chmod +x bash
          sudo mkdir -p ./option-root/bin/
          sudo mv busybox ./option-root/bin/
          sudo mv bash ./option-root/bin/
          COMMANDS=$(./option-root/bin/busybox --list)
          for cmd in $COMMANDS; do
              sudo ln -sf /pckg/option/bin/busybox ./option-root/bin/$cmd
          done
          sudo mksquashfs option-root option.sfs -quiet -comp xz -no-xattrs -b 256k
          sudo rm -rf option-root
       
      - name: Create squashfs for python3 npk        
        run: |
          sudo wget -O cpython-3.11.9.tar.gz -nv https://github.com/indygreg/python-build-standalone/releases/download/20240415/cpython-3.11.9+20240415-x86_64-unknown-linux-musl-install_only.tar.gz
          sudo tar -xf cpython-3.11.9.tar.gz
          sudo rm -f cpython-3.11.9.tar.gz
          sudo rm -rf ./python/include
          sudo rm -rf ./python/share
          sudo mksquashfs python python3.sfs -quiet -comp xz -no-xattrs -b 256k
          sudo rm -rf python

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: squashfs
          path: ./*.sfs

  Patch_Latest_RouterOS:
    runs-on: ubuntu-latest
    needs: Create_SquashFS
    strategy:
      matrix:
        channel: [stable, testing]
    env:
      TZ: 'Asia/Shanghai'
      LATEST_VERSION_URL: 'https://upgrade.mikrotik.com/routeros/NEWESTa7.'
      LATEST_VERSION: ""
      CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
      CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}
      CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
      CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
      MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
      MIKRO_NPK_SIGN_PUBLIC_KEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_KEY }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: squashfs

    - name: Get latest routeros version  
      run: |
        echo $(uname -a)
        if [ "${{ inputs.version }}" == "" ]; then
          LATEST_VERSION=$(wget -nv -O - ${{ env.LATEST_VERSION_URL }}${{ matrix.channel }} | cut -d ' ' -f1)
        else
          LATEST_VERSION=${{ inputs.version }}
        fi
        echo Latest Version:$LATEST_VERSION
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV

    - name: Get netinstall-${{ env.LATEST_VERSION }}.zip
      run: |
        sudo wget -nv -O netinstall-$LATEST_VERSION.zip https://mirrors.3dsc.co/pub/mikrotik/ROS/7.17/netinstall-7.17.zip
        sudo unzip netinstall-$LATEST_VERSION.zip
        sudo rm netinstall-$LATEST_VERSION.zip

    - name: Patch netinstall.exe
      run: |
        sudo -E python3 patch.py netinstall netinstall.exe
        sudo zip netinstall-$LATEST_VERSION.zip ./netinstall.exe
        
    - name: Get mikrotik-${{ env.LATEST_VERSION }}-mmips.npk
      run: |
        sudo wget -nv -O routeros-$LATEST_VERSION-mmips.npk https://mirrors.3dsc.co/pub/mikrotik/ROS/7.17/routeros-7.17-mmips.npk
    - name: Patch mikrotik-${{ env.LATEST_VERSION }}-mmips.npk
      run: |
        sudo -E python3 patch.py npk routeros-$LATEST_VERSION-mmips.npk
        sudo zip routeros-$LATEST_VERSION-mmips.zip routeros-$LATEST_VERSION-mmips.npk
        
    - name: Delete Release tag ${{ env.LATEST_VERSION }}
      run: |
        HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        RELEASE_INFO=$(curl -s -H $HEADER https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_VERSION)
        RELEASE_ID=$(echo $RELEASE_INFO | jq -r '.id')
        echo "Release ID: $RELEASE_ID"
        if [ "$RELEASE_ID" != "null" ]; then
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$LATEST_VERSION
            echo "Tag $LATEST_VERSION deleted successfully."
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
            echo "Release with tag $LATEST_VERSION deleted successfully."
        else
            echo "Release not found for tag: $LATEST_VERSION)"
        fi

    - name: Create Release tag ${{ env.LATEST_VERSION }}
      uses: softprops/action-gh-release@v2
      with:
        name: "MikroTik ${{ env.LATEST_VERSION }}"
        body: "MikroTik ${{ env.LATEST_VERSION }}"
        tag_name: ${{ env.LATEST_VERSION }}
        make_latest:  ${{ matrix.channel == 'stable' }}
        prerelease:  ${{ matrix.channel == 'testing' }}
        files: |
          mikrotik-${{ env.LATEST_VERSION }}.iso
          chr-${{ env.LATEST_VERSION }}.*.zip
          netinstall-${{ env.LATEST_VERSION }}.zip
          install-image-${{ env.LATEST_VERSION }}.zip
          routeros-${{ env.LATEST_VERSION }}-mmips.zip
          routeros-${{ env.LATEST_VERSION }}-mmips.npk
